import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,f as t}from"./app.76aaae20.js";const p={},e=t(`<h1 id="ajax" tabindex="-1"><a class="header-anchor" href="#ajax" aria-hidden="true">#</a> Ajax</h1><p><strong>什么是AJAX？</strong></p><details class="custom-container details"><summary>Details</summary><p>Ajax是一种异步请求数据的web开发技，在不刷新页面的情况下加载数据</p><p>Ajax的目的是提高用户体验，较少网络数据的传输量，节省了网络带宽</p><p>Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发送异步请求，从服务器获得数据 XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术，JavaScript可以及时向服务器提出请求和处理响应，而不阻塞用户</p></details><p><strong>原生JavaScript AJAX请求有几个步骤？</strong></p><details class="custom-container details"><summary>Details</summary><ol><li>创建 XMLHttpRequest 对象<code>new XMLHttpRequest()</code></li><li>发送信息至服务器时内容编码类型<code>xhr.setRequestHeader</code></li><li>接受服务器响应数据<code>client.onreadystatechange</code></li><li>定请求的类型、URL 以及是否异步处理请求。<code>xhr.open(method, url, async)</code></li><li>发送请求<code>xhr.send()</code></li></ol></details><p><strong>ajax的使用</strong></p><details class="custom-container details"><summary>Details</summary><ol><li>创建Ajax核心对象XMLHttpRequest(记得考虑兼容性)</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">XMLHttpRequest</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 兼容 IE7+, Firefox, Chrome, Opera, Safari  </span>
	xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">XMLHttpRequest</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// 兼容 IE6, IE5 </span>
	xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">&quot;Microsoft.XMLHTTP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>向服务器发送请求</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> async<span class="token punctuation">)</span><span class="token punctuation">;</span>  
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;fname=Henry&amp;lname=Ford&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//\`POST\`请求参数放在send里面，即请求体</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>一个Promise对象实现的 Ajax 操作的例子：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getJSON</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> handler<span class="token punctuation">;</span>
    client<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Accept&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> promise<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">&quot;/posts.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Contents: &#39;</span> <span class="token operator">+</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;出错了&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p><strong>什么是readyState？</strong></p><details class="custom-container details"><summary>Details</summary><p>readyState是XMLHttpRequest对象的一个属性，用来标识当前XMLHttpRequest对象处于什么状态。 readyState总共有5个状态值，分别为0~4，每个值代表了不同的含义：</p><p>0：未初始化 — 尚未调用.open()方法；<br> 1：启动 — 已经调用.open()方法，但尚未调用.send()方法；<br> 2：发送 — 已经调用.send()方法，但尚未接收到响应；<br> 3：接收 — 已经接收到部分响应数据；<br> 4：完成 — 已经接收到全部响应数据，而且已经可以在客户端使用了；</p></details><p><strong>什么是status？</strong></p><details class="custom-container details"><summary>Details</summary><p>HTTP状态码(status)由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型：</p><p>1xx（临时响应）：表示临时响应并需要请求者继续执行操作的状态码。<br> 2xx（成功）：表示成功处理了请求的状态码。<br> 3xx（重定向）：表示要完成请求，需要进一步操作。通常，这些状态代码用来重定向。<br> 4xx（请求错误）：这些状态码表示请求可能出错，妨碍了服务器的处理。<br> 5xx（服务器错误）：这些状态码表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。</p></details><p><strong>常见的状态码</strong></p><details class="custom-container details"><summary>Details</summary><p>200 表示从客户端发来的请求在服务器端被正常处理了。<br> 204 表示请求处理成功，但没有资源返回。<br> 301 表示永久性重定向。该状态码表示请求的资源已被分配了新的URI，以后应使用资源现在所指的URI。<br> 302 表示临时性重定向。<br> 304 表示客户端发送附带条件的请求时（指采用GET方法的请求报文中包含if-matched,if-modified-since,if-none-match,if-range,if-unmodified-since任一个首部）服务器端允许请求访问资源，但因发生请求未满足条件的情况后，直接返回304Modified（服务器端资源未改变，可直接使用客户端未过期的缓存）<br> 400 表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。<br> 401 表示未授权（Unauthorized)，当前请求需要用户验证<br> 403 表示对请求资源的访问被服务器拒绝了<br> 404 表示服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。<br> 500 表示服务器端在执行请求时发生了错误。也有可能是Web应用存在的bug或某些临时的故障。<br> 503 表示服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</p></details><p><strong>GET和POST请求数据区别</strong></p><details class="custom-container details"><summary>Details</summary><p>GET在浏览器回退时是无害的，而POST会再次提交请求。<br> GET产生的URL地址可以被Bookmark，而POST不可以。<br> GET请求会被浏览器主动cache，而POST不会，除非手动设置。<br> GET请求只能进行url编码，而POST支持多种编码方式。<br> GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。<br> GET请求在URL中传送的参数是有长度限制的，而POST么有。<br> 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。<br> GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。<br> GET参数通过URL传递，POST放在Request body中。</p></details><p><strong>JSON字符串和JSON对象的相互转换</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//字符串转对象</span>
<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>
<span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&#39;(&#39;</span> <span class="token operator">+</span> jsonstr <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span>   

<span class="token comment">// 对象转字符串</span>
<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>跨域解决方案有哪些？</strong></p><details class="custom-container details"><summary>Details</summary><p><strong>JSONP 只能解决GET跨域(问的最多)</strong> **原理：**动态创建一个script标签。利用script标签的src属性不受同源策略限制。因为所有的src属性和href属性都不受同源策略限制。可以请求第三方服务器数据内容。 步骤：</p><ol><li>创建一个script标签</li><li>script的src属性设置接口地址</li><li>接口参数,必须要带一个自定义函数名 要不然后台无法返回数据。</li><li>通过定义函数名去接收后台返回数据</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">//去创建一个script标签</span>
  <span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;script&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//script的src属性设置接口地址 并带一个callback回调函数名称</span>
  script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&quot;http://127.0.0.1:8888/index.php?callback=jsonpCallback&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">//插入到页面</span>
  document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//通过定义函数名去接收后台返回数据</span>
  <span class="token keyword">function</span> <span class="token function">jsonpCallback</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">//注意：jsonp返回的数据是json对象可以直接使用</span>
      <span class="token comment">//ajax 取得数据是json字符串需要转换成json对象才可以使用。</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>CORS：跨域资源共享</strong></p><p>原理：服务器设置Access-Control-Allow-OriginHTTP响应头之后，浏览器将会允许跨域请求. 限制：浏览器需要支持HTML5，可以支持POST，PUT等方法兼容ie9以上 需要后台设置.</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>Access-Control-Allow-Origin: *              //允许所有域名访问，或者
Access-Control-Allow-Origin: http://a.com   //只允许所有域名访问
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>设置 document.domain</strong></p><p>原理：相同主域名不同子域名下的页面，可以设置document.domain让它们同域<br> 限制：同域document提供的是页面间的互操作，需要载入iframe页面.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// URL http://a.com/foo</span>
<span class="token keyword">var</span> ifr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;iframe&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ifr<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;http://b.a.com/bar&#39;</span><span class="token punctuation">;</span> 
ifr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">var</span> ifrdoc <span class="token operator">=</span> ifr<span class="token punctuation">.</span>contentDocument <span class="token operator">||</span> ifr<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>document<span class="token punctuation">;</span>
   ifrdoc<span class="token punctuation">.</span><span class="token function">getElementsById</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
ifr<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ifr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ES5 postMessage</strong> ES5新增的 postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递. 语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">postMessage</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>origin<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>用Apache做转发（逆向代理），让跨域变成同域</strong></p></details>`,19),o=[e];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","ajax.html.vue"]]);export{d as default};
