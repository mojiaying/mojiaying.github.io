import{_ as l}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as a,f as e}from"./app.76aaae20.js";const s={},t=e('<h1 id="基本问题-非技术问题" tabindex="-1"><a class="header-anchor" href="#基本问题-非技术问题" aria-hidden="true">#</a> 基本问题(非技术问题)</h1><h2 id="_1-自我介绍" tabindex="-1"><a class="header-anchor" href="#_1-自我介绍" aria-hidden="true">#</a> 1. 自我介绍</h2><ul><li>选修网页设计</li><li>熟悉原生写法</li><li>擅长CSS</li><li>擅长组件设计</li><li>有丰富主导开发和独立开发经验</li><li>喜欢尝试新技术</li><li>懂一点后端</li><li>倾向使用新技术 （提高开发效率和开发体验）</li></ul><details class="custom-container details"><summary>Details</summary><p>基本思路：</p><ol><li>15年毕业，16年正式开始前端工作，商务英语专业，选修PS和网页设计，实习英语培训老师，业余时间抄网站，16年尝试找开发工作。</li><li>16年第一份工作：兼职作设计和静态页面开发，做得比较多的是CSS、Js作炫酷的动效和表单数据交互</li><li>18年第二份工作：开始接触vue,对组件化工程化认识</li><li>20年第三份工作: 开始独立开发，写项目架构和工程优化，旧项目重构，这是我技术进步表大的一份工作。独立开发了两个工程主导开发了三个工程和维护旧的项目。</li><li>21年第四分工作：技术上没有太多的更新，面试时说有个大前端的开发准备启动在找人，结果我进去后项目给别的组了。<br> 做了两个月旧项目需求迭代，用的技术栈主要时vue2.0和webpack,用的技术都是跟以前差不多，但这是一个五年多的在线项目，前端组有7个人，让我比较深刻地感受到了，多人开发代码管理的难点所在和项目慢慢复杂后代码维护成本剧增，这对我写代码有很大启发的。后来因为我所签的公司从平安撤出来了，本来我是要走的，正好隔壁组有个项目要重构让我过去，把这个react 项目重构和开发完所有的业务后就辞职了。</li><li>8月底辞职的，不小心关节错位做了手术，在家休息期间朋友介绍了两个外单给我，一个时旧项目的需求迭代，一个是新项目，我尝试用vue3+TS+vite构建工程开发，兼做了部分后端业务开发。</li><li>因为工作量并不多，在这期间把计算机四门专业课过了一遍，弥补一下自己理论知识的欠缺。</li></ol></details><h2 id="项目介绍" tabindex="-1"><a class="header-anchor" href="#项目介绍" aria-hidden="true">#</a> 项目介绍</h2><details class="custom-container details"><summary>Details</summary><p>项目介绍</p><ol><li>权益：</li></ol><ul><li>权益中台，5年老项目，业务复杂，关联方多（数据结构，下单方式，验证方式）</li><li>注重安全问题</li><li>用户量大，需求叠加特别注重风险评估（影响范围【前端后端业务层，其他组，代码层：页面、模块、组件，具体影响点】）</li><li>技术上没又太大的难题，但对代码设计层面要求比较高，技术债务太多了，</li><li>开发没问题，生产出现问题，而且问题定位复杂，自己代码问题，APP包兼容问题，第三方问题，其他组给过了的数据问题，组件问题，数据抓包，真机调试，</li><li>项目在技术上没有什么更新，但在开发设计上给我很深刻的启发。</li><li>我主要负责的业务模块是权益详情，订单详情和订单提交页面，这是这个项目最核心业务，这三个页面每个页面都有3千多行代码，结构布局和使用什么样式都是在管理后台配的， 之前一直是直接往上面叠加需求历史包袱比较重，订单提交页面使用的表单组件就有20多个，关联方多，用到的技术不难，只是页面比较复杂。 这份工作比较侧重沟通协调的能力，问题定位能力，代码设计能力，影响范围的评估。</li></ul><ol><li><p>云手机：功能单一的工程，类似一个插件，客服端给用户发起云手机的入口，并协助客户安全地完成业务办理。远程操控手机使用的是react插件，我主要是负责react项目重构成vue项目。跟普通工程构建差不多，我比较注重代码架构组件化的设计，打包优化和编译优化。使用VUE2</p></li><li><p>残联维护：bug 处理，性能优化，安全问题。</p></li><li><p>审议平台： 用于论文提交和审批的平台，主要是对用户和文件进行管理，文件预览，上传和下载</p></li></ol><p>开发案例：</p><ul><li>header组件的例子说明多人开发存在的问题，组件封装原则，代码评判标准</li><li>订单提交页的复杂度，代码设计的重要性，怎么都能满足需求，怎样设计可以尽量降低维护成本。</li><li>因为使用一个新组件出现兼容问题， PUI组的同事说要升级才可以修复，上线之后发现其他组件有问题，这是一个非常严重的生成问题</li></ul><p>留下来的原因： 对有问题的项目做改进的实践，有做尝试，无法上线。</p><p>自己的贡献：对生产问题定位和修复，表单页抽了七八个组件出来，对工程做了eslint格式化，代码逻辑优化和安全问题处理，四级地址联动做了缓存，重写了一个react项目。</p><p>历史包袱：</p><ol><li>组件没有标准</li><li>业务没有自己的风格，各写各的</li><li>纯粹需求迭代，</li><li>工程架构基本设计</li><li>这是没有难度的，只是没有人带这个头做这个规范，人员流动比较大，技术能力参差不齐，代码这个东西一旦乱了想要它再整齐需要的投入精力和要承担的风险都是大大增加的。</li><li>项目开发到一定程度再规范，改动代码会有很不好预估的多风险。</li></ol><p>这个项目给我的启发就是：</p><ol><li>在多人开发的项目，架构设计和组件化非常重要，业务逻辑要有自己的风格，起个好头非常重要，没有风格的工程是非常可怕的</li><li>纯粹的需求叠加会，当业务越来越复杂的时候，会导致维护成本越来越高，到最后只能走重构这条路</li><li>当技术更新的时候团队人员的技术得跟上，得有明确的技术规范。</li><li>技术选型应该跟人员配备匹配。</li></ol><p>遇到的问题</p><p>第一次接的需求是给十个页面添加客服入口，我的理解是直接在页面多一个配置就行了，我一看代码蒙了，其中一个工程50多个页面，header的写法就有十几种， 我的认知里面，这种问题是不可能出现的，所以我把50多个页面的header都看了一遍，把header组件抽离了出来，就一个header组件就有300多行代码，配置就有20多个， 结果不给上，说测试人力不够，我提议先上10个页面，最后评估还是觉得风险太大，不给上，最终的方案还是在当前页面去改。 这种那么不起眼的问题出现也是有原因的，</p><ol><li>对组件化工程化没有一个标准</li><li>不能因为有风险而不去做应该做的优化，可以在保证风险可控的情况下慢慢地做改进。小病不治会拖成大病。</li><li>在多人开发的项目，更应该有更严格组件化的标准</li></ol><p>反思： 多人开发的弊端，怎么规避 团队技术升级应该考虑的问题 旧项目改造风险分析，投入产出比 一个好的leader一定是不能脱离代码的，一旦脱离代你很难看到潜在的风险，技术问题应该用技术解决，而不是管理去解决 管理层面的问题是比较好处理的，但代码层面的问题，债务是越滚越大的，越到后面就越不好处理，开发到后面更注重的是在线稳定性的问题。 学习非常重要 存粹的需求迭代会给后面的维护留下很多历史债务</p></details><h2 id="个人情况" tabindex="-1"><a class="header-anchor" href="#个人情况" aria-hidden="true">#</a> 个人情况</h2><p>（这部分问的比较多）：考研啊、恋爱啊、学习啊、offer情况、项目情况、经历等等</p><details class="custom-container details"><summary>Details</summary><p><strong>考研</strong>：<br> 虽然我工作经验较多，但不是科班出身，计算机的理论知识还是有所欠缺的，所以在10月份开始学计算机考研的四门专业课和高等数学， 虽然在工作中能用到的东西不多，但理论就像灵魂，以前觉得很多东西都是很散的，现在觉得很多东西是有关联性的，有章可循的，这些专业理论课可以让人思维更加缜密，对互联网开发的认识更加清晰。 科研思维会让我们实践更好地把握方向。<br><strong>恋爱/婚姻</strong>：<br> 一段好的关系应该是相互促进相互成就的，健康良性的恋爱和婚姻不会成为你事业的绊脚石，真正爱你的人不会让你放弃自己热爱的东西，事业是恋爱和家庭稳定的基石。如果一段关系需要消化很多时间精力去维持的话，那么说明这段关系是不合适的。<br><strong>学习</strong>：<br> 在休息期间对vue3+TS+viet学习和实践， Java入门，花两个月学了四门计算机专业课和高等数学。<br><strong>offer:</strong><br> 12月26号刚开始投简历<br><strong>项目情况</strong>：<br> 【权利待补充】</p></details><ol start="4"><li>你怎么看待前端？</li></ol><details class="custom-container details"><summary>Details</summary><ol><li>我觉得前端的横向跨度比较广，PC，H5，小程序，Android，IOS，很多东西的用法写法，五花八门，框架插件多，杂七杂八的。</li><li>但它的本质是一样的，写页面和做数据交互。前端做的东西是直接面向用户的，</li><li>页面视觉美感，易用性，流畅度是直接影响到用户体验的，页面的美感和易用性主要是由设计和产品决定的，前端懂一点也对工作也是有帮助的。</li><li>页面流畅度是影响用户体验的最重要因素，前端价值所在的地方，所以对性能的优化和网络的优化对前端来说是非常重要的。</li><li>工程架构的设计，模块的封装，业务实现的风格，代码风格，虽然没有什么技术难度，是很重要的，在多人开发中这些尤为重要，随着需求的迭代，工程越来越复杂，如果它的设计不好，没有风格会给后面的维护增加很多开发成本。</li><li>业务上做的无非就是数据请求，图文视频的展示，表单交互验证，文件上传下载，</li><li>性能优化：</li><li>网络优化：</li><li>工程架构上：路由，请求，数据共享，缓存，菜单权限，环境配置，打包优化，业务组件化模块化整合</li></ol></details><p>对前端的认识</p><details class="custom-container details"><summary>Details</summary><p>前端的工作：</p><ol><li>写页面+数据交互</li><li>工程架构设计，模块封装，代码质量</li><li>性能优化，性能监控</li><li>网络优化</li><li>网络安全</li><li>SEO搜索引擎优化</li><li>代码检测eslint 和 commit规范</li></ol><p>业务：</p><ul><li>图文视频展示渲染</li><li>数据增删查改交互</li><li>表达交互+校验</li><li>文件上传下载</li></ul><p>工程架构：</p><ul><li>工程格式化</li><li>菜单权限</li><li>路由</li><li>环境配置</li><li>请求封装</li><li>公共函数</li></ul><p>静态页面：响应式布局</p><p>构建工具：gulp, grunt, webpack, vite.<br> 框架：vue, react<br> 技术问题：跨域问题，安全问题</p></details><ol><li>你怎么看待加班？能不能接受加班？</li></ol><details class="custom-container details"><summary>Details</summary><ol><li>紧急情况加班是应该的，保证项目正常运行时优先级最高的。</li><li>我不太认同长时间超负荷加班，写代码时个脑力活，长时间上班会影响工作效率，纯粹赶需求会影响到代码质量，会大大技术债务增长速度，这是得不偿失的。</li><li>程序员每天都应该留一点时间出来学习，工作不应该过分占用业余学习时间，技术进步才是提升工作效率的根本。</li><li>很多时候我加班是想尝试一个更好的解决方案，这在把工作做得更好的同时对自己来说也是一种成长，我非常珍惜这种机会。</li></ol></details><ol><li>你往后的职业规划是什么？入职之后有什么计划吗？</li></ol><details class="custom-container details"><summary>Details</summary><ul><li>前端的工作对我来收没有什么太多的难度，目前我不要求一定要做新的技术，用什么语言用什么技术不是最重要的，重要的是你的思维会。</li><li>我觉得自己的工作经验是比较丰富的，但不是科班出生，专业理论是有所欠缺的，我把计算机四门基础课简单过了一遍，</li><li>未来一年的时间我会工作中继续深化理论知识的学习，理论可以让实践思考不偏离方向，锻炼这种科学严谨的思维对工作是很有帮助的。</li><li>目前我觉得自己优秀，但我有一个比较长远的心愿是希望40岁后可以回归教育，希望在未来十年在实践中不断丰富自己，到时有足够的资格成为一名优秀的计算机老师，这也是我为什么一定要学理论的一个原因。</li></ul></details><ol><li>职业规划</li></ol><details class="custom-container details"><summary>Details</summary><ol><li>前端技术基础: CSS + Js + TS + Vue + webpack + Vite + react</li><li>可视化技术：canvas， SVG，webGL/threejs，</li><li>源码阅读，源码设计思想学习</li><li>代码管理，CI/CD</li><li>性能优化</li><li>网络安全</li><li>学一门后端语言：go/node/java</li><li>计算机基础学习： <ul><li>数据结构和算法</li><li>计算机网络</li><li>操作系统</li><li>计算机组成</li><li>数据库</li><li>高等数学</li><li>英语</li></ul></li><li>考研（走人工智能，大数据方向）</li></ol></details><ol><li>为什么离职，不骑驴找马</li></ol><details class="custom-container details"><summary>Details</summary></details><p><strong>组内有什么是你主导做的吗</strong></p><details class="custom-container details"><summary>Details</summary><ul><li>上上份工作是我做主导，比如技术选型，代码架构，业务实现风格设计，我主要是做代码层面的整体设计，和复杂功能的设计。</li><li>这份工作第一个项目不是，有组长专门负责需求分配和验收，他不需要写代，主要负责业务管理层面，代码层的东西是我主导。</li><li>第二个是项目代码架构是我写的，技术选型工程结构模块组件设计风格，组长和团队成员他们并不关注这些，我自己做决定就好了</li></ul><p>我个人认为leader要参与开发，要不代码层面的问题不好发现，把人管好纯粹保证需求的完成，代码没管好，管理就没有灵魂。</p></details><p><strong>之前是怎么学前端的</strong></p><details class="custom-container details"><summary>Details</summary><ol><li>刚开始在学校选修了网页设计和PS，出来工作因为对炫酷页面很感兴趣，自己找网站抄</li><li>学习的步骤：找视频教程，把基础和实战看一遍再跟着做一遍，做系统的笔记。</li><li>开发过程中遇到问题先去看官网，看别人整理的博客笔记</li></ol></details>',25),r=[t];function o(d,c){return i(),a("div",null,r)}const m=l(s,[["render",o],["__file","index.html.vue"]]);export{m as default};
