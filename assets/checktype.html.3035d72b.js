import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as e,a as n,b as s,d as c,f as a,r as l}from"./app.76aaae20.js";const u={},i=a(`<h1 id="js-类型" tabindex="-1"><a class="header-anchor" href="#js-类型" aria-hidden="true">#</a> JS 类型</h1><h2 id="类型检测" tabindex="-1"><a class="header-anchor" href="#类型检测" aria-hidden="true">#</a> 类型检测</h2><ol><li><code>typeof</code> 可以判断的类型：<code>number/string/boolean/function/undefined/object</code><ul><li><code>typeof []/null/{}t</code>都是object</li></ul></li><li><code>instanceof</code> 检测构造函数的是否为某个对象的实例, 原型链prototype是否有某个实力对象。</li><li>值类型与对象</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&quot;houdunren&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> cms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hdcms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> hd<span class="token punctuation">,</span> <span class="token keyword">typeof</span> cms<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//string object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//9 执行时会被值转化为对象，所以值类型也可以调用方法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cms<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h2><p><strong>转义符号</strong><br> 有些字符有双层含义，需要使用 \\ 转义符号进行含义转换。 <code>let content = &#39;Jenny: \\&#39;jenny.com\\&#39;&#39;;</code>.<br> 常用转义符： <code>\\t</code>制表符, &#39;\\n&#39;换行, &#39;\\&#39;斜杠符号,<code>\\&quot;</code> 双引号</p><p><strong>连接运算符</strong>:连接多个内容组合成字符串 <code>console.log(name + &#39;成立于&#39; + year + &#39;年&#39;);</code></p><p><strong>模板字面量</strong>: 符号包裹的字符串中可以写入引入变量与表达式,支持换行，可以在表达式中嵌套使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;ul&gt;
      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>lessons<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
          &lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;
      </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
  &lt;/ul&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>标签模板</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> lesson <span class="token operator">=</span> <span class="token string">&#39;css&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> web <span class="token operator">=</span> <span class="token string">&#39;Jenny blog&#39;</span><span class="token punctuation">;</span>
tag <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">访问</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>web<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">学习</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>lesson<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">前端知识</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">tag</span><span class="token punctuation">(</span><span class="token parameter">strings<span class="token punctuation">,</span> <span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[&quot;访问&quot;, &quot;学习&quot;, &quot;前端知识&quot;]</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;Jenny&quot;, &quot;css&quot;]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>获取长度</strong> <code>str.length</code></p><p><strong>大小写转换</strong> <code>str.toUpperCase()</code>, <code>str.toLowerCase()</code></p><p><strong>移除空白</strong>: <code>str.trim()</code>, <code>str.trimLeft()</code>, <code>str.rimRight()</code></p><p><strong>获取单字符</strong>: <code>str.charAt(index)</code>, <code>str[index]</code></p><p><strong>截取字符串</strong>:</p><ul><li><code>str.slice(start, end)</code>(负数表示从后面数起)</li><li><code>str.substring(start, end)</code>（不能用负数）</li><li><code>str.substr(start, length)</code>(负数表示从后面数起)</li></ul><p><strong>查找字符串</strong>：</p><ul><li><code>str.indexOf(string, start)</code>返回索引</li><li><code>str.lastIndexOf(string, end)</code>返回索引</li><li><code>str.search() </code>返回索引</li><li><code>str.includes(string, start)</code>返回布尔值</li><li><code>str.startsWith(string, start)</code>返回布尔值</li><li><code>str.endsWith(string, end)</code>返回布尔值</li><li><code>str.some(word =&gt; dosomething)</code></li></ul><p><strong>替换字符串</strong>: <code>str.replace(old, new)</code> 使用字符串替换来生成关键词链接</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> word <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;php&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">&quot;我喜欢在后盾人学习php与css知识&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> title <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> word</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;a href=&quot;?w=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>word<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>word<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/a&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> title<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>重复生成</strong>：<code>str.repeat(num)</code></p><p><strong>类型转换</strong>：</p><ul><li>转数组： <code>str.split(&#39;&#39;)</code></li><li>数组转字符串：<code>arr.toString()</code></li><li>数字转字符串：<code>num.toString()</code></li><li>隐式转换：<code>let str = 99 + &#39;&#39;</code></li></ul><h2 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> Boolean</h2><p>所以类型都可以隐式转换为boolean类型 false: 空字符， 0， null, undefined, NAN</p><table><thead><tr><th>数据类型</th><th>true</th><th>false</th></tr></thead><tbody><tr><td>String</td><td>非空字符串</td><td>空字符串</td></tr><tr><td>Number</td><td>非 0 的数值</td><td>0 、NaN</td></tr><tr><td>Array</td><td>数组不参与比较时</td><td>参与比较的空数组</td></tr><tr><td>Object</td><td>所有对象</td><td></td></tr><tr><td>undefined</td><td>无</td><td>undefined</td></tr><tr><td>null</td><td>无</td><td>null</td></tr><tr><td>NaN</td><td>无</td><td>NaN</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 数字与布尔值比较时，true 转为 1， false转为0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// 字符串在与 Boolean 比较时，两边都为转换为数值类型后再进行比较。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;aaaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;aaaaaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;aaaaa&quot;</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;houdunren&quot;</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token comment">// 数组的表现与字符串原理一样，会先转换为数值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token comment">// 引用类型的 Boolean 值为真，如对象和数组</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>显式转换</strong>:</p><ul><li>使用 <code>!!</code> 转换布尔类型</li><li>使用 <code>Boolean</code> 函数可以显式转换为布尔类型</li></ul><h2 id="number" tabindex="-1"><a class="header-anchor" href="#number" aria-hidden="true">#</a> Number</h2><p><strong>基本函数：</strong></p><ul><li>判断是否为整数<code>Number.isInteger(1.2)</code></li><li>指定返回的小数位数可以四舍五入<code>16.556).toFixed(2)</code></li></ul><p><strong>NaN</strong>.</p>`,34),r=n("li",null,"NaN 不能使用 == 比较",-1),k=n("li",null,"判读是否是NaN：Number.isNaN(res)",-1),d={href:"http://Object.is",target:"_blank",rel:"noopener noreferrer"},m=a(`<p><strong>类型转换</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;houdunren&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;9&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//9</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>parseInt</strong>:字符串取整数 <strong>parseFloat</strong>:字符串取数字保留小数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;  99houdunren&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//99</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;18.55&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>字符串数字跟数字计算会转换为数字</strong>.</p><p><strong>舍入操作</strong><code>1.556.toFixed(2)</code></p><p><strong>浮点精度</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token comment">// 结果：0.30000000000000004</span>
<span class="token comment">// 计算机以二进制处理数值类型，上面的 0.1 与 0.2 转为二进制后是无穷的</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//0.0001100110011001100110011001100110011001100110011001101</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//0.001100110011001100110011001100110011001100110011001101</span>
<span class="token comment">// 处理方式</span>
<span class="token comment">// 1.用 toFixed 方法进行小数截取</span>
<span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> <span class="token number">0.9</span><span class="token punctuation">)</span> <span class="token comment">//0.09999999999999998</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> <span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//0.10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="math" tabindex="-1"><a class="header-anchor" href="#math" aria-hidden="true">#</a> Math</h2><ul><li>极限值：<code>min</code> 与 <code>max</code> 可以取得最小与最大值。</li><li>用apply 来从数组中取值</li><li>向上整数<code>Math.ceil(1.111)</code></li><li>向下整数<code>Math.floor(1.555)</code></li><li>四舍五入<code>Math.round(1.5)</code></li></ul>`,10);function g(v,b){const t=l("ExternalLinkIcon");return o(),e("div",null,[i,n("ul",null,[r,k,n("li",null,[s("判读是否是NaN："),n("a",d,[s("Object.is"),c(t)]),s("(res, NaN)")])]),m])}const N=p(u,[["render",g],["__file","checktype.html.vue"]]);export{N as default};
