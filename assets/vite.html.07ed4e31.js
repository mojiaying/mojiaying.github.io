import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,f as t}from"./app.76aaae20.js";const p={},e=t(`<h1 id="vite-简介" tabindex="-1"><a class="header-anchor" href="#vite-简介" aria-hidden="true">#</a> vite 简介</h1><p>vite 原理： 主要利用浏览器ESM特性导入代码，在服务器端按需编译返回，跳过了打包这个概念，这实际上是让浏览器接管了打包程序的部分工作：Vite 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入的代码，只有当前屏幕上实际使用时才会被处理。</p><p>快速的冷启动: No Bundle + esbuild 预构建</p><p>Vite相比于Webpack而言，没有打包的过程，而是直接启动了一个开发服务器devServer</p><p>vite的缺点在于目前的生态不够webpack成熟</p><p>vite原理 当声明一个 script 标签类型为 module 时，Vite 的主要功能就是通过劫持浏览器的这些请求，并在后端进行相应的处理将项目中使用的文件通过简单的分解与整合，然后再返回给浏览器,Vite整个过程中没有对文件进行打包编译，所以其运行速度比原始的webpack开发编译速度快出许多！ Vite 通过在一开始将应用中的模块区分为 依赖 和 源码 两类，改进了开发服务器启动时间。</p><p>源码 通常包含一些并非直接是 JavaScript 的文件，需要转换（例如 JSX，CSS 或者 Vue/Svelte 组件），时常会被编辑。同时，并不是所有的源码都需要同时被加载。（例如基于路由拆分的代码模块）。Vite 以 原生 ESM 方式服务源码。</p><p>这实际上是让浏览器接管了打包程序的部分工作：Vite 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入的代码，即只在当前屏幕上实际使用时才会被处理。</p><h1 id="优化-2-使用-https" tabindex="-1"><a class="header-anchor" href="#优化-2-使用-https" aria-hidden="true">#</a> 优化 2 使用 https</h1><p>vite 默认会对文件有个类似 304 的缓存效果，如果文件未修改，再次请求时会直接读取缓存，但Chrome 浏览器不缓存 非 https 请求的文件，每次刷新时都需要重新读取一遍 需安装插件解决：</p><p><code>npm i vite-plugin-mkcert -D</code></p><p>在 vite.config.js 中使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>defineConfig<span class="token punctuation">}</span> <span class="token keyword">from</span><span class="token string">&#39;vite&#39;</span>
<span class="token keyword">import</span> mkcert <span class="token keyword">from</span><span class="token string">&#39;vite-plugin-mkcert&#39;</span>

<span class="token comment">// https://vitejs.dev/config/</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">https</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">mkcert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="手写vite笔记" tabindex="-1"><a class="header-anchor" href="#手写vite笔记" aria-hidden="true">#</a> 手写vite笔记</h1><ol><li>node 服务器处安装 <code>npm install -g nodemon</code>, <code>npm install --save-dev nodemon</code> node 服务器处理浏览器加载各种资源的请求 可以通过命令行启动</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nodemon <span class="token parameter variable">--watch</span> src/ <span class="token parameter variable">-e</span> js,coffee app.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以配置nodemon.json文件来使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;src/&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">ignore</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">script</span><span class="token operator">:</span> <span class="token string">&#39;app.js&#39;</span>
  <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;coffee&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">exec</span><span class="token operator">:</span> <span class="token string">&#39;node&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以在package.json设置方法如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nodemon&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;homepage&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://nodemon.io&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;...&quot;</span><span class="token operator">:</span> <span class="token string">&quot;... other standard package.json values&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;nodemonConfig&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;ignore&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;test/*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;docs/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;delay&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2500&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置好后，命令后执行<code>nodemon</code></p><h2 id="预备工作" tabindex="-1"><a class="header-anchor" href="#预备工作" aria-hidden="true">#</a> 预备工作</h2><ol><li>新建文件夹vite-demo</li><li>初始化node包管理器<code>npm init</code></li><li>安装nodemon开发环境<code>npm install --save-dev nodemon</code></li><li>安装koa<code>npm i koa</code></li></ol><h2 id="vite-js-起基本的服务器架构" tabindex="-1"><a class="header-anchor" href="#vite-js-起基本的服务器架构" aria-hidden="true">#</a> vite.js 起基本的服务器架构</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// node 服务器处理浏览器加载各种资源的请求</span>
<span class="token comment">// index.html, js, vue</span>
<span class="token keyword">const</span> koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 创建实例</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 中间件配置</span>
<span class="token comment">// 处理路由</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 加载index.html</span>
  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;kvit!!!!!&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;kite vite start up!!!!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令后起服务：<code>nodemon</code></p><p>vite 实现基本思路</p><ul><li>起 node 服务器处理浏览器加载各种资源的请求</li><li>处理路由 <ol><li>index.html直接引入</li></ol></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>tx<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;text/html&#39;</span>
ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./index.html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>js文件模块地址重写</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span>url<span class="token punctuation">)</span>
ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;application/javascript&#39;</span>
ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token function">rewriteImport</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 模块地址的重写</span>
<span class="token keyword">function</span> <span class="token function">rewriteImport</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> content<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"> from [&#39;&quot;](.*)[&#39;&quot;]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s1<span class="token punctuation">,</span> s2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> s2<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;./&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span>  s2<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;../&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> s1
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 模块替换</span>
      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> from &#39;/@modules/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>s2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>第三方模块地址重写</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 裸模块名称</span>
<span class="token keyword">const</span> moduleName <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;/@modules/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 去node_modules目录中找</span>
<span class="token keyword">const</span> prefix <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./node_modules&#39;</span><span class="token punctuation">,</span> moduleName<span class="token punctuation">)</span>
<span class="token comment">// package.json中获取module字段</span>
<span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> <span class="token string">&#39;/package.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>module
<span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> module<span class="token punctuation">)</span>
<span class="token keyword">const</span> ret <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>
ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;application/javascript&#39;</span>
ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token function">rewriteImport</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>.vue 文件处理</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取.vue文件相对地址</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// 使用compilerSFC解析.vue文件</span>
<span class="token keyword">const</span> ret <span class="token operator">=</span> compilerSFC<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>query<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// SFC请求 </span>
  <span class="token comment">// 读取vue文件， 解析为js</span>
  <span class="token comment">// 获取脚本部分内容</span>
  <span class="token keyword">const</span> scriptContent <span class="token operator">=</span> ret<span class="token punctuation">.</span>descriptor<span class="token punctuation">.</span>script<span class="token punctuation">.</span>content
  <span class="token comment">// 替换默认导出为常量，方便后续修改</span>
  <span class="token keyword">const</span> script <span class="token operator">=</span> scriptContent<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;export default &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;const __script = &#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script:-----------&#39;</span><span class="token punctuation">,</span> script<span class="token punctuation">)</span>
  ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;application/javascript&#39;</span>
  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">rewriteImport</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
    // 解析tpl
    import {render as __render} from &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?type=template&#39;
    __script.render = __render
    export default __script
  </span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;template&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> tpl <span class="token operator">=</span> ret<span class="token punctuation">.</span>descriptor<span class="token punctuation">.</span>template<span class="token punctuation">.</span>content<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;template-------------&#39;</span><span class="token punctuation">,</span> tpl<span class="token punctuation">)</span>
  <span class="token keyword">const</span> render <span class="token operator">=</span> compilerDOM<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>tpl<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>code
  ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;application/javascript&#39;</span><span class="token punctuation">;</span>
  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token function">rewriteImport</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","vite.html.vue"]]);export{k as default};
