import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,b as t}from"./app.8a378504.js";const p={},e=t(`<h1 id="react-相关笔记" tabindex="-1"><a class="header-anchor" href="#react-相关笔记" aria-hidden="true">#</a> react 相关笔记</h1><h2 id="类-class-api-和基于函数的钩子-hooks-api-用哪个" tabindex="-1"><a class="header-anchor" href="#类-class-api-和基于函数的钩子-hooks-api-用哪个" aria-hidden="true">#</a> 类（class）API 和基于函数的钩子（hooks） API 用哪个</h2><p>官方推荐使用钩子（函数），而不是类。</p><ul><li>因为钩子更简洁，代码量少，</li><li>用起来比较&quot;轻&quot;，而类比较&quot;重&quot;</li><li>钩子是函数，更符合 React 函数式的本质。</li><li>类（class）是数据和逻辑的封装</li><li>函数一般来说，只应该做一件事，就是返回一个值</li><li>React 的函数组件只应该做一件事情：返回组件的 HTML 代码，而没有其他的功能</li></ul><p>函数式编程将那些跟数据计算无关的操作，都称为 &quot;副效应&quot; （side effect），这样就不再是纯函数了，</p><h2 id="什么是钩子hooks" tabindex="-1"><a class="header-anchor" href="#什么是钩子hooks" aria-hidden="true">#</a> 什么是钩子hooks</h2><p>钩子（hook）就是 React 函数组件的副效应解决方案，用来为函数组件引入副效应。</p><ul><li><code>useState</code> 当state数据更新时，会触发render函数从而更新页面</li><li><ul><li><code>useContext</code>：保存上下文</li></ul></li><li><code>useRef()</code>: 保存引用</li><li><code>useEffect</code>: <ul><li>第一个参数是一个函数，组件每渲染一次，该函数就自动执行一次；</li><li>第二个参数用一个数组指定副效应函数的依赖项，只有依赖项发生变化，才会重新渲染。</li><li>如果第二个参数是一个空数组，就表明副效应参数没有任何依赖项, 只在第一次加载执行一次，重新渲染不再执行</li><li>如果有多个副效应，应该调用多个useEffect()，而不应该合并写在一起。</li></ul></li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>props<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>props<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动态组件" tabindex="-1"><a class="header-anchor" href="#动态组件" aria-hidden="true">#</a> 动态组件</h2><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">login</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">enum</span> PageTypeEnum <span class="token punctuation">{</span>
    login <span class="token operator">=</span> <span class="token string">&#39;login&#39;</span><span class="token punctuation">,</span>
    register <span class="token operator">=</span> <span class="token string">&#39;register&#39;</span><span class="token punctuation">,</span>
    forgetPassword <span class="token operator">=</span> <span class="token string">&#39;forgetPassword&#39;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 页面类型</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>pageType<span class="token punctuation">,</span> setPageType<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>PageTypeEnum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>PageTypeEnum<span class="token punctuation">.</span>login<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">DynamicComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>PageTypeEnum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> TypeMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>PageTypeEnum<span class="token punctuation">.</span>login<span class="token punctuation">]</span><span class="token operator">:</span> LoginForm<span class="token punctuation">,</span> <span class="token punctuation">[</span>PageTypeEnum<span class="token punctuation">.</span>register<span class="token punctuation">]</span><span class="token operator">:</span> RegisterForm<span class="token punctuation">,</span> <span class="token punctuation">[</span>PageTypeEnum<span class="token punctuation">.</span>forgetPassword<span class="token punctuation">]</span><span class="token operator">:</span> ForgetPasswordForm<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> Component <span class="token operator">=</span> TypeMap<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 在组件内调用setPageType 来切换组件</span>
        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token attr-name">setPageType</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>setPageType<span class="token punctuation">}</span></span> <span class="token attr-name">loginSuccess</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>loginSuccess<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DynamicComponent</span></span> <span class="token attr-name">type</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>pageType<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">LoginForm</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> setPageType<span class="token punctuation">,</span> loginSuccess <span class="token punctuation">}</span><span class="token operator">:</span> Props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="scss-类名写法" tabindex="-1"><a class="header-anchor" href="#scss-类名写法" aria-hidden="true">#</a> SCSS 类名写法</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">&#39;./index.module.scss&#39;</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span>Flex className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>loginPage<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>a<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Flex<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,13),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","react.html.vue"]]);export{k as default};
