import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as a,f as c}from"./app.76aaae20.js";const t={},o=c('<h1 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack" aria-hidden="true">#</a> webpack</h1><p>webpack打包过程 1.识别入口文件</p><p>2.通过逐层识别模块依赖。（Commonjs、amd或者es6的import，webpack都会对其进行分析。来获取代码的依赖）</p><p>3.webpack做的就是分析代码。转换代码，编译代码，输出代码</p><p>4.最终形成打包后的代码</p><p>webpack打包原理 1.先逐级递归识别依赖，构建依赖图谱</p><p>2.将代码转化成AST抽象语法树</p><p>3.在AST阶段中去处理代码</p><p>4.把AST抽象语法树变成浏览器可以识别的代码， 然后输出</p><p>重点:这里需要递归识别依赖，构建依赖图谱。图谱对象就是类似下面这种</p>',10),r=[o];function s(n,_){return p(),a("div",null,r)}const m=e(t,[["render",s],["__file","webpack.html.vue"]]);export{m as default};
