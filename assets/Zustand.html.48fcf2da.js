import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,b as t}from"./app.8a378504.js";const p="/assets/immer.ee5df85a.png",e={},o=t(`<h1 id="zustand-笔记" tabindex="-1"><a class="header-anchor" href="#zustand-笔记" aria-hidden="true">#</a> Zustand 笔记</h1><h2 id="zustand" tabindex="-1"><a class="header-anchor" href="#zustand" aria-hidden="true">#</a> Zustand</h2><p><code>Zustand</code>是一个状态管理库，它旨在提供与 Redux 相同的功能，但使用更少的代码。</p><p>它是一种可预测的状态容器，使 React 应用程序中的状态更易于管理。Zustand 还提供了一些有用的特性，如自动订阅和取消订阅、按需加载、推迟初始化等。</p><p><code>Redux DevTools</code> 是一个 Chrome 扩展程序，它提供了一个开发工具来调试和监视 Redux 应用程序的状态和行为。它可以帮助开发人员更好地理解应用程序的工作原理，并快速识别和解决问题。</p><h2 id="devtools" tabindex="-1"><a class="header-anchor" href="#devtools" aria-hidden="true">#</a> devtools</h2><p>使用 <code>devtools</code> 中间件来增强您的状态容器</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// create生成一个全局的store</span>
<span class="token keyword">import</span> create <span class="token keyword">from</span> <span class="token string">&#39;zustand&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> devtools <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zustand/middleware&#39;</span>
<span class="token keyword">const</span> <span class="token function-variable function">asyncFetchData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>
  <span class="token function">devtools</span><span class="token punctuation">(</span>
    <span class="token comment">//persist 的中间件, 该中间件通过 localStorage 来持久化来自应用程序的数据，刷新页面或者完全关闭页面时, 状态不会重置</span>
    <span class="token function">persist</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">set<span class="token punctuation">,</span> <span class="token keyword">get</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">fruits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">decrement</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">getData</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asyncFetchData</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
      <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">count</span><span class="token operator">:</span> res<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">triggerDbcount</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> val <span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span>
      <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">count</span><span class="token operator">:</span> val<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 数组添加元素</span>
    <span class="token function-variable function">addFruits</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">fruit</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">set</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>state<span class="token punctuation">.</span>fruits<span class="token punctuation">,</span> fruit<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;globalState&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">storage</span><span class="token operator">:</span> <span class="token function">createJSONStorage</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>sessionStorage<span class="token punctuation">)</span>
    <span class="token comment">// storage: createJSONStorage(()=&gt;localStorage)</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>persist</code>独立写法</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>persist<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zustand/middleware&quot;</span>
<span class="token comment">// and modify our existing state</span>
<span class="token keyword">let</span> <span class="token function-variable function">store</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">set</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">fruits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">addFruits</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">fruit</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">fruits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>state<span class="token punctuation">.</span>fruits<span class="token punctuation">,</span> fruit<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// persist the created state</span>
store <span class="token operator">=</span> <span class="token function">devtools</span><span class="token punctuation">(</span><span class="token function">persist</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;basket&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// create the store</span>
<span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 useStore 钩子来访问状态和操作。例如，您可以在 React 组件中使用以下代码来获取状态并更新它：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./store&#39;</span>

<span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
  <span class="token keyword">const</span> increment <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>increment<span class="token punctuation">)</span>
  <span class="token keyword">const</span> decrement <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>decrement<span class="token punctuation">)</span>
  <span class="token keyword">const</span> fetch <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>getData<span class="token punctuation">)</span>
  <span class="token keyword">const</span> handleDbcount <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>triggerDbcount<span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>increment<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>decrement<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">-</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>fetch<span class="token punctuation">}</span><span class="token operator">&gt;</span>异步获取数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleDbcount<span class="token punctuation">}</span><span class="token operator">&gt;</span>dbcount<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="immer" tabindex="-1"><a class="header-anchor" href="#immer" aria-hidden="true">#</a> Immer</h2><p>Immer并不会对原有的状态数据进行直接更改，这样就保持了不可变性，但是在使用语法上却是直接赋值，注意如图所示，直接赋值的对象并不是原有的状态数据，而是另一个Draft对象。 <img src="`+p+`" alt="Alt text" loading="lazy"></p><h3 id="produce" tabindex="-1"><a class="header-anchor" href="#produce" aria-hidden="true">#</a> produce</h3><p><code> produce(currentState, recipe: (draftState) =&gt; void): nextState</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> produce <span class="token keyword">from</span> <span class="token string">&quot;immer&quot;</span><span class="token keyword">import</span> produce <span class="token keyword">from</span> <span class="token string">&quot;immer&quot;</span>
 ​
 <span class="token keyword">const</span> baseState <span class="token operator">=</span> <span class="token punctuation">[</span>
     <span class="token punctuation">{</span>
         <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Learn TypeScript&quot;</span><span class="token punctuation">,</span>
         <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">{</span>
         <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Try Immer&quot;</span><span class="token punctuation">,</span>
         <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">]</span>
 ​
 <span class="token keyword">const</span> nextState <span class="token operator">=</span> <span class="token function">produce</span><span class="token punctuation">(</span>baseState<span class="token punctuation">,</span> <span class="token parameter">draftState</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     draftState<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Tweet about it&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
     draftState<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>柯里化的用法就是直接传入一个方法，入参内部帮你准备好</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code> <span class="token keyword">import</span> produce <span class="token keyword">from</span> <span class="token string">&quot;immer&quot;</span>
 ​
 <span class="token comment">// curried producer:</span>
 <span class="token keyword">const</span> toggleTodo <span class="token operator">=</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">draft<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     <span class="token keyword">const</span> todo <span class="token operator">=</span> draft<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=&gt;</span> todo<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span>
     todo<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>done
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
 ​
 <span class="token keyword">const</span> baseState <span class="token operator">=</span> <span class="token punctuation">[</span>
     <span class="token comment">/* as is */</span>
 <span class="token punctuation">]</span>
 ​
 <span class="token keyword">const</span> nextState <span class="token operator">=</span> <span class="token function">toggleTodo</span><span class="token punctuation">(</span>baseState<span class="token punctuation">,</span> <span class="token string">&quot;Immer&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>react hook 的柯理化调用</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code> <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
 <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 普通调用</span>
 <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">prevCount</span> <span class="token operator">=&gt;</span> prevCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 柯里化调用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>背后的原理就是Proxy，它相对于defineProperty来说简直就是没有弱点的全能。</p><p>在React里的使用 一般来说获得更新后的数据就可以调用setState或者Hooks里的状态改变方法了，不过在Immer里也提供了useImmer和useImmerReducer来整合</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code> <span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useCallback <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
 <span class="token keyword">import</span> <span class="token punctuation">{</span> useImmer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;use-immer&quot;</span><span class="token punctuation">;</span>
 ​
 <span class="token keyword">const</span> <span class="token function-variable function">TodoList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useImmer</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
     <span class="token punctuation">{</span>
       <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;React&quot;</span><span class="token punctuation">,</span>
       <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Learn React&quot;</span><span class="token punctuation">,</span>
       <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">{</span>
       <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;Immer&quot;</span><span class="token punctuation">,</span>
       <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Try Immer&quot;</span><span class="token punctuation">,</span>
       <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 ​
   <span class="token keyword">const</span> handleToggle <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     <span class="token function">setTodos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">draft</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
       <span class="token keyword">const</span> todo <span class="token operator">=</span> draft<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> todo<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
       todo<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>done<span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 ​
   <span class="token keyword">const</span> handleAdd <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     <span class="token function">setTodos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">draft</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
       draft<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
         <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;todo_&quot;</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
         <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;A new todo&quot;</span><span class="token punctuation">,</span>
         <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useCallback <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
 <span class="token keyword">import</span> <span class="token punctuation">{</span> useImmerReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;use-immer&quot;</span><span class="token punctuation">;</span>
 ​
 <span class="token keyword">const</span> <span class="token function-variable function">TodoList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useImmerReducer</span><span class="token punctuation">(</span>
     <span class="token punctuation">(</span><span class="token parameter">draft<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
       <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">case</span> <span class="token string">&quot;toggle&quot;</span><span class="token operator">:</span>
           <span class="token keyword">const</span> todo <span class="token operator">=</span> draft<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> todo<span class="token punctuation">.</span>id <span class="token operator">===</span> action<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
           todo<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>done<span class="token punctuation">;</span>
           <span class="token keyword">break</span><span class="token punctuation">;</span>
         <span class="token keyword">case</span> <span class="token string">&quot;add&quot;</span><span class="token operator">:</span>
           draft<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
             <span class="token literal-property property">id</span><span class="token operator">:</span> action<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
             <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;A new todo&quot;</span><span class="token punctuation">,</span>
             <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span>
           <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">break</span><span class="token punctuation">;</span>
         <span class="token keyword">default</span><span class="token operator">:</span>
           <span class="token keyword">break</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">[</span> <span class="token comment">/* initial todos */</span> <span class="token punctuation">]</span>
   <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类的拷贝" tabindex="-1"><a class="header-anchor" href="#类的拷贝" aria-hidden="true">#</a> 类的拷贝</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>immerable<span class="token punctuation">,</span> produce<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;immer&quot;</span>
 ​
 <span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token punctuation">{</span>
     <span class="token punctuation">[</span>immerable<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
 ​
     <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">hour<span class="token punctuation">,</span> minute</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> hour
         <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> minute
     <span class="token punctuation">}</span>
 ​
     <span class="token keyword">get</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>hour<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>minute<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
     <span class="token punctuation">}</span>
 ​
     <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token parameter">draft</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
             draft<span class="token punctuation">.</span>minute<span class="token operator">++</span>
         <span class="token punctuation">}</span><span class="token punctuation">)</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 ​
 <span class="token keyword">const</span> clock1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clock</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
 <span class="token keyword">const</span> clock2 <span class="token operator">=</span> clock1<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clock1<span class="token punctuation">.</span>time<span class="token punctuation">)</span> <span class="token comment">// 12:10</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clock2<span class="token punctuation">.</span>time<span class="token punctuation">)</span> <span class="token comment">// 12:11</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clock2 <span class="token keyword">instanceof</span> <span class="token class-name">Clock</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="副本和原始数据" tabindex="-1"><a class="header-anchor" href="#副本和原始数据" aria-hidden="true">#</a> 副本和原始数据</h3><p>调用current来得到副本，在debug的时候会比较有用，同时也可以逃逸出produce方法</p><p>这里涉及到原理，因为draft对象是通过Proxy.revocable()方法生成的，在produce结束的时候就被取消了</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> produce <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;immer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default
 <span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
 <span class="token punctuation">}</span>
 ​
 <span class="token keyword">const</span> next <span class="token operator">=</span> <span class="token function">produce</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> <span class="token parameter">draft</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;draft in timeout&#39;</span><span class="token punctuation">,</span> draft<span class="token punctuation">)</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行后会报TypeError: Cannot read property &#39;Symbol(nodejs.util.inspect.custom)&#39; of null的错误，注意这个base必须是一个对象，如果改成值，那是不会报错的</p><p>使用副本就没有限制了</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span>
 <span class="token punctuation">}</span>
 ​
 <span class="token keyword">const</span> next <span class="token operator">=</span> <span class="token function">produce</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> <span class="token parameter">draft</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     draft<span class="token punctuation">.</span>x<span class="token operator">++</span>
     <span class="token keyword">const</span> orig <span class="token operator">=</span> <span class="token function">original</span><span class="token punctuation">(</span>draft<span class="token punctuation">)</span>
     <span class="token keyword">const</span> copy <span class="token operator">=</span> <span class="token function">current</span><span class="token punctuation">(</span>draft<span class="token punctuation">)</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>orig<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copy<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
 ​
     <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
         <span class="token comment">// 在produce结束之后再执行</span>
         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>orig<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copy<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
 ​
     draft<span class="token punctuation">.</span>x<span class="token operator">++</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>draft<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
 ​
 <span class="token comment">// 将会打印</span>
 <span class="token comment">// 0 (orig.x)</span>
 <span class="token comment">// 1 (copy.x)</span>
 <span class="token comment">// 2 (draft.x)</span>
 <span class="token comment">// 2 (next.x)</span>
 <span class="token comment">// 0 (after timeout, orig.x)</span>
 <span class="token comment">// 1 (after timeout, copy.x)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而original就是用来获得原始对象的，不光可以针对draft还能针对draft里的成员</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> baseState <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">users</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Richie&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
 <span class="token keyword">const</span> nextState <span class="token operator">=</span> <span class="token function">produce</span><span class="token punctuation">(</span>baseState<span class="token punctuation">,</span> <span class="token parameter">draftState</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baseState <span class="token operator">===</span> <span class="token function">original</span><span class="token punctuation">(</span>draftState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; true</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baseState<span class="token punctuation">.</span>users <span class="token operator">===</span> <span class="token function">original</span><span class="token punctuation">(</span>draftState<span class="token punctuation">.</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; true</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过isDraft来判断是否是代理对象</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code> <span class="token keyword">const</span> baseState <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">users</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Bobby&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
 <span class="token keyword">const</span> nextState <span class="token operator">=</span> <span class="token function">produce</span><span class="token punctuation">(</span>baseState<span class="token punctuation">,</span> <span class="token parameter">draft</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     <span class="token function">isDraft</span><span class="token punctuation">(</span>draft<span class="token punctuation">)</span> <span class="token comment">// =&gt; true</span>
     <span class="token function">isDraft</span><span class="token punctuation">(</span>draft<span class="token punctuation">.</span>users<span class="token punctuation">)</span> <span class="token comment">// =&gt; true</span>
     <span class="token function">isDraft</span><span class="token punctuation">(</span>draft<span class="token punctuation">.</span>users<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; true</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
 <span class="token function">isDraft</span><span class="token punctuation">(</span>nextState<span class="token punctuation">)</span> <span class="token comment">// =&gt; false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>手动得到draft对象</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createDraft<span class="token punctuation">,</span> finishDraft<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;immer&quot;</span>
 ​
 <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;michel&quot;</span><span class="token punctuation">,</span>
     <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
 <span class="token punctuation">}</span>
 ​
 <span class="token keyword">const</span> draft <span class="token operator">=</span> <span class="token function">createDraft</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
 draft<span class="token punctuation">.</span>todos <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> window<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;http://host/&quot;</span> <span class="token operator">+</span> draft<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">const</span> loadedUser <span class="token operator">=</span> <span class="token function">finishDraft</span><span class="token punctuation">(</span>draft<span class="token punctuation">)</span> <span class="token comment">// 不是直接用draft</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="patches" tabindex="-1"><a class="header-anchor" href="#patches" aria-hidden="true">#</a> Patches</h3><h3 id="自动锁定" tabindex="-1"><a class="header-anchor" href="#自动锁定" aria-hidden="true">#</a> 自动锁定</h3><p>produce返回的对象都是自动上了锁的，底层调用了Object.freeze()来冻结变化，为的是防止意料之外的修改(唯一的可能只能是在produce里去修改draft)。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> nextState <span class="token operator">=</span> <span class="token function">produce</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">draft</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   draft<span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nextState<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// { age: 11 }</span>
 nextState<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nextState<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// { age: 11 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="produce返回新数据" tabindex="-1"><a class="header-anchor" href="#produce返回新数据" aria-hidden="true">#</a> produce返回新数据</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code> <span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id
   <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token comment">// 逗你玩</span>
     <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要返回undefined，就要显式指定返回nothing</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> produce<span class="token punctuation">,</span> <span class="token punctuation">{</span>nothing<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;immer&quot;</span>
 ​
 <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token string">&quot;world&quot;</span>
 <span class="token punctuation">}</span>
 ​
 <span class="token function">produce</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token parameter">draft</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
 <span class="token function">produce</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token parameter">draft</span> <span class="token operator">=&gt;</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
 <span class="token comment">// 这俩都返回原始状态 { hello: &quot;world&quot;}</span>
 ​
 <span class="token function">produce</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token parameter">draft</span> <span class="token operator">=&gt;</span> nothing<span class="token punctuation">)</span>
 <span class="token comment">// 返回的是undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想用箭头函数的单行写法修改数据的话，可以在前面加上void</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 单个修改</span>
 <span class="token function">produce</span><span class="token punctuation">(</span><span class="token parameter">draft</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">(</span>draft<span class="token punctuation">.</span>user<span class="token punctuation">.</span>age <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 ​
 <span class="token comment">// 多个修改</span>
 <span class="token function">produce</span><span class="token punctuation">(</span><span class="token parameter">draft</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>draft<span class="token punctuation">.</span>user<span class="token punctuation">.</span>age <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>draft<span class="token punctuation">.</span>user<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">186</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但其实还是推荐<code>draft =&gt; { draft.user.age += 1}</code>这样子的写法</p><p>produce还能返回Promise对象，这样子还能结合上async/await</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code> <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;michel&quot;</span><span class="token punctuation">,</span>
     <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
 <span class="token punctuation">}</span>
 ​
 <span class="token keyword">const</span> loadedUser <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">produce</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">draft</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     draft<span class="token punctuation">.</span>todos <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> window<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;http://host/&quot;</span> <span class="token operator">+</span> draft<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,53),c=[o];function l(i,u){return s(),a("div",null,c)}const d=n(e,[["render",l],["__file","Zustand.html.vue"]]);export{d as default};
